theme(
legend.title = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
) +
geom_text_repel(aes(x = 1.6, label = paste0(major_type, "\n", round(fuel_count/sum(fuel_count)*100, 1), "%")),
position = position_stack(vjust = 0.5), color = "black", size = 5, fontface = "bold")
burned_chart
#burned
burned_M <- burned_df %>%
filter(major_type == "M-1/M-2") %>%
mutate(percent_C = as.numeric(str_extract(FUEL_TYPE_, "\\d+(?=%)")))
total_M_burned <- sum(burned_M$COUNT)
burned_M <- burned_M %>%
mutate(FREQ = COUNT / total_M_burned)
burned_M_plot <- ggplot(burned_M, aes(x = percent_C, y =FREQ)) +
geom_bar(stat = "identity", fill = "aquamarine4", color = "black", alpha = 0.7) +
labs(x = "Conifer Percentage(%)", y = "Proportion of M1/M2 Fuels", title = "Conifer Percentage in M1/M2 Burned Fuels") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 24, face = "bold"),
axis.title = element_text(size = 20),                         # Axis labels size
axis.text = element_text(size = 16)                          # Axis text size
)
burned_M_plot
#unburned
unburned_M <- unburned_df %>%
filter(major_type == "M-1/M-2") %>%
mutate(percent_C = as.numeric(str_extract(FUEL_TYPE_, "\\d+(?=%)")))
total_M_unburned <- sum(unburned_M$COUNT)
unburned_df <- read_csv("LWF161_UnburnedFuel.csv")
burned_df <- read_csv("LWF161_BurnedFuel.csv")
#aggregate M1
burned_df <- burned_df %>%
mutate(major_type= str_extract(FUEL_TYPE, "^[^ ]+"))
unburned_df <- unburned_df %>%
mutate(major_type= str_extract(FUEL_TYPE, "^[^ ]+"))
agg_burned <- burned_df %>%
group_by(major_type) %>%
summarise(fuel_count = sum(COUNT))
agg_unburned <- unburned_df %>%
group_by(major_type) %>%
summarise(fuel_count = sum(COUNT))
#make pie charts
colors <- brewer.pal(11, "Paired")
burned_chart <- agg_burned %>%
mutate(perc = round((fuel_count/ sum(fuel_count)), 4)) %>%
mutate(labels = scales::percent(perc)) %>%
arrange(desc(major_type)) %>% ## arrange in the order of the legend
mutate(text_y = cumsum(fuel_count) - fuel_count/2) ### calculate where to place the text labels
burned_chart <- burned_chart %>%
ggplot(aes(x = "", y = fuel_count, fill = major_type)) +
geom_col() +
theme_void() +
coord_polar(theta = "y") +
geom_bar(stat = "identity", width = 1, color = "gray98", linewidth = 0.2) +
geom_label_repel(aes(label = labels, y = text_y),
nudge_x = 0.6, nudge_y = 0.6,
size = 2, show.legend = F) +
guides(fill = guide_legend(title = "Fuel Types")) +
scale_fill_manual(values = c("brown", "chocolate", "darkorange",
"darkgoldenrod1", "yellow",
"darkolivegreen3", "aquamarine4",
"orchid3", "slateblue3",
"violet", "deepskyblue")) +
labs(title = "Burned Fuel Types") +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold")
)
burned_chart
ggsave("burned_fuel_pie.png", plot = burned_chart, dpi = 300, width = 4, height = 3)
unburned_chart <- agg_unburned %>%
mutate(perc = round((fuel_count/ sum(fuel_count)), 4)) %>%
mutate(labels = scales::percent(perc)) %>%
arrange(desc(major_type)) %>% ## arrange in the order of the legend
mutate(text_y = cumsum(fuel_count) - fuel_count/2) ### calculate where to place the text labels
unburned_chart <- unburned_chart %>%
ggplot(aes(x = "", y = fuel_count, fill = major_type)) +
geom_col() +
theme_void() +
geom_bar(stat = "identity", width = 1, color = "grey98", size = 0.2) +
coord_polar(theta = "y") +
geom_label_repel(aes(label = labels, y = text_y),
nudge_x = 0.6, nudge_y = 0.6,
size = 2, show.legend = F) +
guides(fill = guide_legend(title = "Fuel Types")) +
scale_fill_manual(values = c("brown", "chocolate", "darkorange",
"darkgoldenrod1", "yellow",
"darkolivegreen3", "aquamarine4",
"orchid3", "slateblue3",
"violet", "deepskyblue")) +
labs(title = "Unburned Fuel Types") +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold")
)
unburned_chart
ggsave("unburned_fuel_pie.png", plot = unburned_chart, dpi = 300, width = 4, height = 3)
FBP_C22 <- FBP_short_all %>% filter(FuelType == "C2")
#--------------------- For shorter time interval -------------------------------
#--------- for C2 only ----------------------
# Reshape the data to long format (wide to long)
df_long_C22 <- FBP_C22 %>%
pivot_longer(cols = -c(WEATHER_DATE, FuelType),  # Exclude WEATHER_DATE and FuelType columns
names_to = "variable",  # Create a new column for the original column names
values_to = "value")    # Create a new column for the values
# Create and store each plot in a list (one plot per variable)
plots_list_C22 <- lapply(unique(df_long_C22$variable), function(var) {
subset_data <- subset(df_long_C22, variable == var)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long_C22, variable == var), aes(x = WEATHER_DATE, y = value)) +
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
geom_line(color = "blue") +  # Line color (you can adjust as needed)
geom_point(color = "blue") + # Add points to the lines
labs(x = "Date", y = var, title = paste(var, "for C2 Fuel Type")) +  # Add title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position =  element_blank()
)
})
# Name each plot in the list with the variable names for easy access
names(plots_list_C22) <- unique(df_long_C22$variable)
plots_list_C22[["CFB"]]  <- plots_list_C22[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list_C22[["CFB"]]  <- plots_list_C22[["CFB"]]  + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list_C22[["CFB"]]
# Save each plot to a file, for example, as PNG files
lapply(names(plots_list_C22), function(var) {
ggsave(paste0("./short/", var, "_C2_plot.png"), plot = plots_list_C22[[var]], width = 10, height = 6)
})
# Define the 5 fuel types
#selectin most dominant fuel codes
fuel_types <- c( "C1", "C2", "C3", "C4", "C5", "D1", "M2")
# Create an empty list to store the dataframes for each fuel type
df_list <- lapply(fuel_types, function(fuel_type) {
# For each fuel type, modify the dataframe and set the FuelType column
df <- input_FBP_df
df$FuelType <- fuel_type
return(df)
})
# Combine all the dataframes into one
input_FBP_df <- bind_rows(df_list)
# Convert the last 11 columns to numeric
input_FBP_df[, (ncol(input_FBP_df)-10):ncol(input_FBP_df)] <- lapply(input_FBP_df[, (ncol(input_FBP_df)-10):ncol(input_FBP_df)], as.numeric)
input_FBP_df
fbp(input_FBP_df[3,])
FBP_df <- fbp(input_FBP_df)
FBP_df
#re-order by ID - for some reason it is out of order
FBP_df$ID <- as.numeric(FBP_df$ID)
FBP_df <- FBP_df[order(FBP_df$ID), ]
FBP_df2 <- cbind(FBP_df, input_FBP_df)
FBP_df2 <- FBP_df2 %>% select(FuelType,WEATHER_DATE, Dj,CFB, CFC, HFI, RAZ, ROS, SFC, TFC)
#SELECT TIME INTERVAL
ignition_date <- as.POSIXct("2015-06-23", format="%Y-%m-%d")
held_date <- as.POSIXct("2015-07-19", format="%Y-%m-%d")
under_control_date <- as.POSIXct("2015-07-26", format="%Y-%m-%d")
ext_date <- as.POSIXct("2016-02-09")
# Example: held_dates and corresponding labels
held_dates <- (c( held_date, under_control_date ))  # Example dates
labels <- c("Held", "Under Control")  # Corresponding labels for each date
# Create a data frame for held_dates and labels
line_labels <- data.frame(
held_date = held_dates,
label = labels
)
FBP_df2 <- FBP_df2 %>% filter(WEATHER_DATE >= ignition_date & WEATHER_DATE <= ext_date)
FBP_C2 <- FBP_df2 %>% filter(FuelType == "C2")
FBP_short_all <- FBP_df2 %>% filter(WEATHER_DATE >= ignition_date & WEATHER_DATE <= under_control_date +5)
FBP_C22 <- FBP_short_all %>% filter(FuelType == "C2")
#--------- for C2 only ----------------------
# Reshape the data to long format (wide to long)
df_long_C2 <- FBP_C2 %>%
pivot_longer(cols = -c(WEATHER_DATE, FuelType),  # Exclude WEATHER_DATE and FuelType columns
names_to = "variable",  # Create a new column for the original column names
values_to = "value")    # Create a new column for the values
# Create and store each plot in a list (one plot per variable)
plots_list_C2 <- lapply(unique(df_long_C2$variable), function(var) {
subset_data <- subset(df_long_C2, variable == var)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long_C2, variable == var), aes(x = WEATHER_DATE, y = value)) +
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
geom_line(color = "blue") +  # Line color (you can adjust as needed)
geom_point(color = "blue") + # Add points to the lines
labs(x = "Date", y = var, title = paste(var, "for C2 Fuel Type")) +  # Add title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position =  element_blank()
)
})
# Name each plot in the list with the variable names for easy access
names(plots_list_C2) <- unique(df_long_C2$variable)
plots_list_C2[["CFB"]]  <- plots_list_C2[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list_C2[["CFB"]]  <- plots_list_C2[["CFB"]]  + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list_C2[["CFB"]]
weather_df <- read_excel("LWF-161-2015-20250309T213257Z-001/LWF-161-2015/Weather/WX-LWF161-2015.xlsx")
View(weather_df)
#make FBP table for each fuel type
#FuelType, LAT, LONG, ELV, FFMC, BUI, WS, WD
# GS (Ground Slope), Dj (Julian day), hr, PC (percent conifer)
conditions <- c("M-1", 48.127944, -91.3020208, 500, 93, 50, 5, 0, 280, 16, 75)
conditions2 <- c("M-1", 48.127944, -91.3020208, 500, 93, 50, 25, 0, 280, 16, 75)
latitude <- 55.476183
longitude <- -112.027267
elevation <- 500
slope <- 0
fuel_type <- "C2"
aspect <- 0
burned_df <- read_csv("LWF161_BurnedFuel.csv")
agg_burned <- burned_df %>%
group_by(FUEL_TYPE) %>%
summarise(fuel_count = sum(COUNT))
input_FBP_df <- weather_df %>%
rename(WS = WIND_SPEED_KMH,
WD = WIND_DIRECTION,
FFMC = FINE_FUEL_MOISTURE_CODE,
BUI = BUILD_UP_INDEX) %>%
mutate(Dj =  yday(WEATHER_DATE),
hr = 16,
FuelType = NA,
GS = slope,
ELV = elevation,
LAT = latitude,
LONG = longitude,
Aspect = aspect) %>%
select(FuelType, WEATHER_DATE, WS, WD, FFMC, BUI, Dj, hr, GS, ELV, LAT, LONG, Aspect)
# Define the 5 fuel types
#selectin most dominant fuel codes
fuel_types <- c( "C1", "C2", "C3", "C4", "C5", "D1", "M2")
# Create an empty list to store the dataframes for each fuel type
df_list <- lapply(fuel_types, function(fuel_type) {
# For each fuel type, modify the dataframe and set the FuelType column
df <- input_FBP_df
df$FuelType <- fuel_type
return(df)
})
# Combine all the dataframes into one
input_FBP_df <- bind_rows(df_list)
# Convert the last 11 columns to numeric
input_FBP_df[, (ncol(input_FBP_df)-10):ncol(input_FBP_df)] <- lapply(input_FBP_df[, (ncol(input_FBP_df)-10):ncol(input_FBP_df)], as.numeric)
input_FBP_df
fbp(input_FBP_df[3,])
FBP_df <- fbp(input_FBP_df)
FBP_df
#re-order by ID - for some reason it is out of order
FBP_df$ID <- as.numeric(FBP_df$ID)
FBP_df <- FBP_df[order(FBP_df$ID), ]
FBP_df2 <- cbind(FBP_df, input_FBP_df)
FBP_df2 <- FBP_df2 %>% select(FuelType,WEATHER_DATE, Dj,CFB, CFC, HFI, RAZ, ROS, SFC, TFC)
#SELECT TIME INTERVAL
ignition_date <- as.POSIXct("2015-06-23", format="%Y-%m-%d")
held_date <- as.POSIXct("2015-07-19", format="%Y-%m-%d")
under_control_date <- as.POSIXct("2015-07-26", format="%Y-%m-%d")
ext_date <- as.POSIXct("2016-02-09")
# Example: held_dates and corresponding labels
held_dates <- (c( held_date, under_control_date ))  # Example dates
labels <- c("Held", "Under Control")  # Corresponding labels for each date
# Create a data frame for held_dates and labels
line_labels <- data.frame(
held_date = held_dates,
label = labels
)
FBP_df2 <- FBP_df2 %>% filter(WEATHER_DATE >= ignition_date & WEATHER_DATE <= ext_date)
FBP_C2 <- FBP_df2 %>% filter(FuelType == "C2")
FBP_short_all <- FBP_df2 %>% filter(WEATHER_DATE >= ignition_date & WEATHER_DATE <= under_control_date +5)
FBP_C22 <- FBP_short_all %>% filter(FuelType == "C2")
#--------- for C2 only ----------------------
# Reshape the data to long format (wide to long)
df_long_C2 <- FBP_C2 %>%
pivot_longer(cols = -c(WEATHER_DATE, FuelType),  # Exclude WEATHER_DATE and FuelType columns
names_to = "variable",  # Create a new column for the original column names
values_to = "value")    # Create a new column for the values
# Create and store each plot in a list (one plot per variable)
plots_list_C2 <- lapply(unique(df_long_C2$variable), function(var) {
subset_data <- subset(df_long_C2, variable == var)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long_C2, variable == var), aes(x = WEATHER_DATE, y = value)) +
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
geom_line(color = "blue") +  # Line color (you can adjust as needed)
geom_point(color = "blue") + # Add points to the lines
labs(x = "Date", y = var, title = paste(var, "for C2 Fuel Type")) +  # Add title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position =  element_blank()
)
})
# Name each plot in the list with the variable names for easy access
names(plots_list_C2) <- unique(df_long_C2$variable)
plots_list_C2[["CFB"]]  <- plots_list_C2[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list_C2[["CFB"]]  <- plots_list_C2[["CFB"]]  + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list_C2[["CFB"]]
# Save each plot to a file, for example, as PNG files
lapply(names(plots_list_C2), function(var) {
ggsave(paste0(var, "_C2_plot.png"), plot = plots_list_C2[[var]], width = 10, height = 6)
})
df_long <- FBP_df2 %>%
pivot_longer(cols = CFB:TFC,  # Reshape only the CFB and CFC columns into long format
names_to = "variable",  # Name for the column that will hold the variable names
values_to = "value")    # Name for the column that will hold the values
plots_list <- lapply(unique(df_long$variable), function(var) {
subset_data <- subset(df_long, variable == var)
# Find the maximum value for the y-axis (for the current variable)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long, variable == var), aes(x = WEATHER_DATE, y = value, color = FuelType, group = FuelType)) +
geom_line(size = 0.8) +  # Set line thickness for C1 to 1.5, others to 1
geom_point() +    # Add points to the lines
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
labs(x = "Date", y = var, title = paste(var, "by Fuel Type"), color = "Fuel Type") +  # Add legend title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),   # Increase legend title size
legend.text = element_text(size = 14),                    # Increase legend text size
legend.key.size = unit(1.5, "cm")
#  legend.position = c(0.9, 0.85)  # Position the legend inside the plot
) +
scale_size_continuous(range = c(0.8, 1.5)) +  # Control the size scale for lines
scale_color_manual(values = c("C1" = "brown", "C2" = "blue", "C3" = "deepskyblue",
"C4" = "darkorchid1", "C5" = "slateblue", "D1" = "darkolivegreen3", "M2" = "aquamarine4"))  # Manually select colors
})
# Name each plot in the list with the variable names for easy access
names(plots_list) <- unique(df_long$variable)
plots_list[["CFB"]]  <- plots_list[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]  <- plots_list[["CFB"]] + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]
plots_list <- lapply(unique(df_long$variable), function(var) {
subset_data <- subset(df_long, variable == var)
# Find the maximum value for the y-axis (for the current variable)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long, variable == var), aes(x = WEATHER_DATE, y = value, color = FuelType, group = FuelType)) +
geom_line(size = 0.8) +  # Set line thickness for C1 to 1.5, others to 1
geom_point() +    # Add points to the lines
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
labs(x = "Date", y = var, title = paste(var, "by Fuel Type"), color = "Fuel Type") +  # Add legend title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),   # Increase legend title size
legend.text = element_text(size = 14),                    # Increase legend text size
legend.key.size = unit(1.5, "cm")
#  legend.position = c(0.9, 0.85)  # Position the legend inside the plot
) +
scale_size_continuous(range = c(0.8, 1.5)) +  # Control the size scale for lines
scale_color_manual(values = c("C1" = "brown", "C2" = "darkorange3", "C3" = "orange2",
"C4" = "gold2", "C5" = "yellow2", "D1" = "darkolivegreen3", "M2" = "aquamarine4"))  # Manually select colors
})
# Name each plot in the list with the variable names for easy access
names(plots_list) <- unique(df_long$variable)
plots_list[["CFB"]]  <- plots_list[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]  <- plots_list[["CFB"]] + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]
plots_list <- lapply(unique(df_long$variable), function(var) {
subset_data <- subset(df_long, variable == var)
# Find the maximum value for the y-axis (for the current variable)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long, variable == var), aes(x = WEATHER_DATE, y = value, color = FuelType, group = FuelType)) +
geom_line(size = 0.8) +  # Set line thickness for C1 to 1.5, others to 1
geom_point() +    # Add points to the lines
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
labs(x = "Date", y = var, title = paste(var, "by Fuel Type"), color = "Fuel Type") +  # Add legend title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),   # Increase legend title size
legend.text = element_text(size = 14),                    # Increase legend text size
legend.key.size = unit(1.5, "cm")
#  legend.position = c(0.9, 0.85)  # Position the legend inside the plot
) +
scale_size_continuous(range = c(0.8, 1.5)) +  # Control the size scale for lines
scale_color_manual(values = c("C1" = "brown", "C2" = "blue", "C3" = "deepskyblue",
"C4" = "darkorchid1", "C5" = "slateblue", "D1" = "darkolivegreen3", "M2" = "aquamarine4"))  # Manually select colors
})
# Name each plot in the list with the variable names for easy access
names(plots_list) <- unique(df_long$variable)
plots_list[["CFB"]]  <- plots_list[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]  <- plots_list[["CFB"]] + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list[["CFB"]]
# Save each plot to a file, for example, as PNG files
lapply(names(plots_list), function(var) {
ggsave(paste0(var, "_plot.png"), plot = plots_list[[var]], width = 10, height = 6)
})
#--------------------- For shorter time interval -------------------------------
#--------- for C2 only ----------------------
# Reshape the data to long format (wide to long)
df_long_C22 <- FBP_C22 %>%
pivot_longer(cols = -c(WEATHER_DATE, FuelType),  # Exclude WEATHER_DATE and FuelType columns
names_to = "variable",  # Create a new column for the original column names
values_to = "value")    # Create a new column for the values
# Create and store each plot in a list (one plot per variable)
plots_list_C22 <- lapply(unique(df_long_C22$variable), function(var) {
subset_data <- subset(df_long_C22, variable == var)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long_C22, variable == var), aes(x = WEATHER_DATE, y = value)) +
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
geom_line(color = "blue") +  # Line color (you can adjust as needed)
geom_point(color = "blue") + # Add points to the lines
labs(x = "Date", y = var, title = paste(var, "for C2 Fuel Type")) +  # Add title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position =  element_blank()
)
})
# Name each plot in the list with the variable names for easy access
names(plots_list_C22) <- unique(df_long_C22$variable)
plots_list_C22[["CFB"]]  <- plots_list_C22[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list_C22[["CFB"]]  <- plots_list_C22[["CFB"]]  + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list_C22[["CFB"]]
# Save each plot to a file, for example, as PNG files
lapply(names(plots_list_C22), function(var) {
ggsave(paste0("./short/", var, "_C2_plot.png"), plot = plots_list_C22[[var]], width = 10, height = 6)
})
df_long2 <- FBP_short_all %>%
pivot_longer(cols = CFB:TFC,  # Reshape only the CFB and CFC columns into long format
names_to = "variable",  # Name for the column that will hold the variable names
values_to = "value")    # Name for the column that will hold the values
plots_list2 <- lapply(unique(df_long2$variable), function(var) {
subset_data <- subset(df_long2, variable == var)
# Find the maximum value for the y-axis (for the current variable)
max_y <- (0.9 * (max(subset_data$value, na.rm = TRUE)))
ggplot(subset(df_long2, variable == var), aes(x = WEATHER_DATE, y = value, color = FuelType, group = FuelType)) +
geom_line(size = 0.8) +  # Set line thickness for C1 to 1.5, others to 1
geom_point() +    # Add points to the lines
geom_vline(xintercept = ignition_date, linetype="dashed",color = "red", size=1) +
geom_vline(xintercept = held_date, linetype="dashed",color = "orangered3", size=1) +
geom_vline(xintercept = under_control_date, linetype="dashed",color = "orangered3", size=1) +
geom_text(aes(x=ignition_date, y=max_y, label="\nIgnition"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=held_date, y=max_y, label="\nBeing Held"), colour="gray30", size = 6,  angle=90) +
geom_text(aes(x=under_control_date, y=max_y, label="\nUnder Control"), size = 6, colour="gray30", angle=90) +
labs(x = "Date", y = var, title = paste(var, "by Fuel Type"), color = "Fuel Type") +  # Add legend title
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),   # Increase legend title size
legend.text = element_text(size = 14),                    # Increase legend text size
legend.key.size = unit(1.5, "cm")
#  legend.position = c(0.9, 0.85)  # Position the legend inside the plot
) +
scale_size_continuous(range = c(0.8, 1.5)) +  # Control the size scale for lines
scale_color_manual(values = c("C1" = "brown", "C2" = "blue", "C3" = "deepskyblue",
"C4" = "darkorchid1", "C5" = "slateblue", "D1" = "darkolivegreen3", "M2" = "aquamarine4"))  # Manually select colors
})
# Name each plot in the list with the variable names for easy access
names(plots_list2) <- unique(df_long2$variable)
plots_list2[["CFB"]]  <- plots_list2[["CFB"]]  + geom_hline(yintercept = 0.1, linetype="dashed", color="gray40", size=0.8)
plots_list2[["CFB"]]  <- plots_list2[["CFB"]] + geom_hline(yintercept = 0.9, linetype="dashed", color="gray40", size=0.8)
plots_list2[["CFB"]]
# Save each plot to a file, for example, as PNG files
lapply(names(plots_list2), function(var) {
ggsave(paste0("./short/", var, "_plot.png"), plot = plots_list2[[var]], width = 10, height = 6)
})
install.packages("fireexposuR", repos = "https://ropensci.r-universe.dev")
install.packages("ggspatial", "maptiles", "MultiscaleDTM", "tidyterra")
install.packages("ggspatial", "maptiles", "MultiscaleDTM", "tidyterra")
install.packages("ggspatial")
install.packages( "maptiles")
install.packages(MultiscaleDTM")
g
kjkjk
lexi
